// Code generated by ogen, DO NOT EDIT.

package order_v1

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *GenericErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #
type BadRequestError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *BadRequestError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *BadRequestError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *BadRequestError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *BadRequestError) SetMessage(val string) {
	s.Message = val
}

func (*BadRequestError) cancelOrderRes() {}
func (*BadRequestError) createOrderRes() {}
func (*BadRequestError) payOrderRes()    {}

// CancelOrderNoContent is response for CancelOrder operation.
type CancelOrderNoContent struct{}

func (*CancelOrderNoContent) cancelOrderRes() {}

// Ref: #
type ConflictError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *ConflictError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *ConflictError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ConflictError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *ConflictError) SetMessage(val string) {
	s.Message = val
}

func (*ConflictError) cancelOrderRes() {}

// Ref: #
type CreateOrderRequest struct {
	// UUID пользователя, создающего заказ.
	UserUUID uuid.UUID `json:"user_uuid"`
	// Массив UUID выбранных деталей.
	PartUuids []uuid.UUID `json:"part_uuids"`
}

// GetUserUUID returns the value of UserUUID.
func (s *CreateOrderRequest) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *CreateOrderRequest) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// SetUserUUID sets the value of UserUUID.
func (s *CreateOrderRequest) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *CreateOrderRequest) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// Ref: #
type CreateOrderResponse struct {
	// UUID созданного заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// Итоговая стоимость заказа.
	TotalPrice float32 `json:"total_price"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *CreateOrderResponse) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetTotalPrice returns the value of TotalPrice.
func (s *CreateOrderResponse) GetTotalPrice() float32 {
	return s.TotalPrice
}

// SetOrderUUID sets the value of OrderUUID.
func (s *CreateOrderResponse) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *CreateOrderResponse) SetTotalPrice(val float32) {
	s.TotalPrice = val
}

func (*CreateOrderResponse) createOrderRes() {}

// Ref: #
type GenericError struct {
	// HTTP-код ошибки.
	Code OptInt `json:"code"`
	// Описание ошибки.
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *GenericError) GetCode() OptInt {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *GenericError) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *GenericError) SetCode(val OptInt) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *GenericError) SetMessage(val OptString) {
	s.Message = val
}

// GenericErrorStatusCode wraps GenericError with StatusCode.
type GenericErrorStatusCode struct {
	StatusCode int
	Response   GenericError
}

// GetStatusCode returns the value of StatusCode.
func (s *GenericErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *GenericErrorStatusCode) GetResponse() GenericError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *GenericErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *GenericErrorStatusCode) SetResponse(val GenericError) {
	s.Response = val
}

// Ref: #
type InternalServerError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *InternalServerError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *InternalServerError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *InternalServerError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *InternalServerError) SetMessage(val string) {
	s.Message = val
}

func (*InternalServerError) cancelOrderRes() {}
func (*InternalServerError) createOrderRes() {}
func (*InternalServerError) getOrderRes()    {}
func (*InternalServerError) payOrderRes()    {}

// Ref: #
type NotFoundError struct {
	// HTTP-код ошибки.
	Code int `json:"code"`
	// Описание ошибки.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *NotFoundError) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *NotFoundError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *NotFoundError) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *NotFoundError) SetMessage(val string) {
	s.Message = val
}

func (*NotFoundError) cancelOrderRes() {}
func (*NotFoundError) getOrderRes()    {}
func (*NotFoundError) payOrderRes()    {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilOrderPaymentMethod returns new OptNilOrderPaymentMethod with value set to v.
func NewOptNilOrderPaymentMethod(v OrderPaymentMethod) OptNilOrderPaymentMethod {
	return OptNilOrderPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilOrderPaymentMethod is optional nullable OrderPaymentMethod.
type OptNilOrderPaymentMethod struct {
	Value OrderPaymentMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilOrderPaymentMethod was set.
func (o OptNilOrderPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilOrderPaymentMethod) Reset() {
	var v OrderPaymentMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilOrderPaymentMethod) SetTo(v OrderPaymentMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilOrderPaymentMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilOrderPaymentMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v OrderPaymentMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilOrderPaymentMethod) Get() (v OrderPaymentMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilOrderPaymentMethod) Or(d OrderPaymentMethod) OrderPaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUID returns new OptNilUUID with value set to v.
func NewOptNilUUID(v uuid.UUID) OptNilUUID {
	return OptNilUUID{
		Value: v,
		Set:   true,
	}
}

// OptNilUUID is optional nullable uuid.UUID.
type OptNilUUID struct {
	Value uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUID was set.
func (o OptNilUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUUID) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUUID) SetToNull() {
	o.Set = true
	o.Null = true
	var v uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUID) Get() (v uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type Order struct {
	// Уникальный идентификатор заказа.
	OrderUUID uuid.UUID `json:"order_uuid"`
	// UUID пользователя.
	UserUUID uuid.UUID `json:"user_uuid"`
	// Список UUID деталей.
	PartUuids []uuid.UUID `json:"part_uuids"`
	// Итоговая стоимость.
	TotalPrice float64 `json:"total_price"`
	// UUID транзакции (если оплачен).
	TransactionUUID OptNilUUID `json:"transaction_uuid"`
	// Способ оплаты.
	PaymentMethod OptNilOrderPaymentMethod `json:"payment_method"`
	// Статус заказа.
	Status OrderStatus `json:"status"`
}

// GetOrderUUID returns the value of OrderUUID.
func (s *Order) GetOrderUUID() uuid.UUID {
	return s.OrderUUID
}

// GetUserUUID returns the value of UserUUID.
func (s *Order) GetUserUUID() uuid.UUID {
	return s.UserUUID
}

// GetPartUuids returns the value of PartUuids.
func (s *Order) GetPartUuids() []uuid.UUID {
	return s.PartUuids
}

// GetTotalPrice returns the value of TotalPrice.
func (s *Order) GetTotalPrice() float64 {
	return s.TotalPrice
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *Order) GetTransactionUUID() OptNilUUID {
	return s.TransactionUUID
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *Order) GetPaymentMethod() OptNilOrderPaymentMethod {
	return s.PaymentMethod
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() OrderStatus {
	return s.Status
}

// SetOrderUUID sets the value of OrderUUID.
func (s *Order) SetOrderUUID(val uuid.UUID) {
	s.OrderUUID = val
}

// SetUserUUID sets the value of UserUUID.
func (s *Order) SetUserUUID(val uuid.UUID) {
	s.UserUUID = val
}

// SetPartUuids sets the value of PartUuids.
func (s *Order) SetPartUuids(val []uuid.UUID) {
	s.PartUuids = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *Order) SetTotalPrice(val float64) {
	s.TotalPrice = val
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *Order) SetTransactionUUID(val OptNilUUID) {
	s.TransactionUUID = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *Order) SetPaymentMethod(val OptNilOrderPaymentMethod) {
	s.PaymentMethod = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val OrderStatus) {
	s.Status = val
}

func (*Order) getOrderRes() {}

// Способ оплаты.
type OrderPaymentMethod string

const (
	OrderPaymentMethodUNKNOWN       OrderPaymentMethod = "UNKNOWN"
	OrderPaymentMethodCARD          OrderPaymentMethod = "CARD"
	OrderPaymentMethodSBP           OrderPaymentMethod = "SBP"
	OrderPaymentMethodCREDITCARD    OrderPaymentMethod = "CREDIT_CARD"
	OrderPaymentMethodINVESTORMONEY OrderPaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all OrderPaymentMethod values.
func (OrderPaymentMethod) AllValues() []OrderPaymentMethod {
	return []OrderPaymentMethod{
		OrderPaymentMethodUNKNOWN,
		OrderPaymentMethodCARD,
		OrderPaymentMethodSBP,
		OrderPaymentMethodCREDITCARD,
		OrderPaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderPaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case OrderPaymentMethodUNKNOWN:
		return []byte(s), nil
	case OrderPaymentMethodCARD:
		return []byte(s), nil
	case OrderPaymentMethodSBP:
		return []byte(s), nil
	case OrderPaymentMethodCREDITCARD:
		return []byte(s), nil
	case OrderPaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderPaymentMethod) UnmarshalText(data []byte) error {
	switch OrderPaymentMethod(data) {
	case OrderPaymentMethodUNKNOWN:
		*s = OrderPaymentMethodUNKNOWN
		return nil
	case OrderPaymentMethodCARD:
		*s = OrderPaymentMethodCARD
		return nil
	case OrderPaymentMethodSBP:
		*s = OrderPaymentMethodSBP
		return nil
	case OrderPaymentMethodCREDITCARD:
		*s = OrderPaymentMethodCREDITCARD
		return nil
	case OrderPaymentMethodINVESTORMONEY:
		*s = OrderPaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Статус заказа.
type OrderStatus string

const (
	OrderStatusPENDINGPAYMENT OrderStatus = "PENDING_PAYMENT"
	OrderStatusPAID           OrderStatus = "PAID"
	OrderStatusCANCELLED      OrderStatus = "CANCELLED"
)

// AllValues returns all OrderStatus values.
func (OrderStatus) AllValues() []OrderStatus {
	return []OrderStatus{
		OrderStatusPENDINGPAYMENT,
		OrderStatusPAID,
		OrderStatusCANCELLED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPENDINGPAYMENT:
		return []byte(s), nil
	case OrderStatusPAID:
		return []byte(s), nil
	case OrderStatusCANCELLED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPENDINGPAYMENT:
		*s = OrderStatusPENDINGPAYMENT
		return nil
	case OrderStatusPAID:
		*s = OrderStatusPAID
		return nil
	case OrderStatusCANCELLED:
		*s = OrderStatusCANCELLED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type PayOrderRequest struct {
	// Метод оплаты.
	PaymentMethod PayOrderRequestPaymentMethod `json:"payment_method"`
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *PayOrderRequest) GetPaymentMethod() PayOrderRequestPaymentMethod {
	return s.PaymentMethod
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *PayOrderRequest) SetPaymentMethod(val PayOrderRequestPaymentMethod) {
	s.PaymentMethod = val
}

// Метод оплаты.
type PayOrderRequestPaymentMethod string

const (
	PayOrderRequestPaymentMethodCARD          PayOrderRequestPaymentMethod = "CARD"
	PayOrderRequestPaymentMethodSBP           PayOrderRequestPaymentMethod = "SBP"
	PayOrderRequestPaymentMethodCREDITCARD    PayOrderRequestPaymentMethod = "CREDIT_CARD"
	PayOrderRequestPaymentMethodINVESTORMONEY PayOrderRequestPaymentMethod = "INVESTOR_MONEY"
)

// AllValues returns all PayOrderRequestPaymentMethod values.
func (PayOrderRequestPaymentMethod) AllValues() []PayOrderRequestPaymentMethod {
	return []PayOrderRequestPaymentMethod{
		PayOrderRequestPaymentMethodCARD,
		PayOrderRequestPaymentMethodSBP,
		PayOrderRequestPaymentMethodCREDITCARD,
		PayOrderRequestPaymentMethodINVESTORMONEY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PayOrderRequestPaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case PayOrderRequestPaymentMethodCARD:
		return []byte(s), nil
	case PayOrderRequestPaymentMethodSBP:
		return []byte(s), nil
	case PayOrderRequestPaymentMethodCREDITCARD:
		return []byte(s), nil
	case PayOrderRequestPaymentMethodINVESTORMONEY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PayOrderRequestPaymentMethod) UnmarshalText(data []byte) error {
	switch PayOrderRequestPaymentMethod(data) {
	case PayOrderRequestPaymentMethodCARD:
		*s = PayOrderRequestPaymentMethodCARD
		return nil
	case PayOrderRequestPaymentMethodSBP:
		*s = PayOrderRequestPaymentMethodSBP
		return nil
	case PayOrderRequestPaymentMethodCREDITCARD:
		*s = PayOrderRequestPaymentMethodCREDITCARD
		return nil
	case PayOrderRequestPaymentMethodINVESTORMONEY:
		*s = PayOrderRequestPaymentMethodINVESTORMONEY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type PayOrderResponse struct {
	// UUID транзакции оплаты.
	TransactionUUID uuid.UUID `json:"transaction_uuid"`
}

// GetTransactionUUID returns the value of TransactionUUID.
func (s *PayOrderResponse) GetTransactionUUID() uuid.UUID {
	return s.TransactionUUID
}

// SetTransactionUUID sets the value of TransactionUUID.
func (s *PayOrderResponse) SetTransactionUUID(val uuid.UUID) {
	s.TransactionUUID = val
}

func (*PayOrderResponse) payOrderRes() {}
