package interceptor

import (
	"context"
	"log"
	"path"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/status"
)

// LoggerInterceptor —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —É–Ω–∞—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—Ä—É–µ—Ç
// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ gRPC —Å–µ—Ä–≤–µ—Ä–∞.
func LoggerInterceptor() grpc.UnaryServerInterceptor {
	return func(
		ctx context.Context,
		req interface{},
		info *grpc.UnaryServerInfo,
		handler grpc.UnaryHandler,
	) (interface{}, error) {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–µ—Ç–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
		method := path.Base(info.FullMethod)

		// –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞
		log.Printf("üöÄ Started gRPC method %s\n", method)

		// –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		startTime := time.Now()

		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
		resp, err := handler(ctx, req)

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		duration := time.Since(startTime)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
		if err != nil {
			st, _ := status.FromError(err)
			log.Printf("‚ùå Finished gRPC method %s with code %s: %v (took: %v)\n", method, st.Code(), err, duration)
		} else {
			log.Printf("‚úÖ Finished gRPC method %s successfully (took: %v)\n", method, duration)
		}

		return resp, err
	}
}
