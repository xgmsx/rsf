package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	orderApiV1 "github.com/xgmsx/rsf/order/internal/api/v1/order"
	orderRepo "github.com/xgmsx/rsf/order/internal/repository/order"
	orderService "github.com/xgmsx/rsf/order/internal/service/order"
	orderV1 "github.com/xgmsx/rsf/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/xgmsx/rsf/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/xgmsx/rsf/shared/pkg/proto/payment/v1"
	"github.com/xgmsx/rsf/shared/pkg/swagger"
)

const (
	httpPort          = "8080"
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

func main() {
	paymentConn, err := grpc.NewClient(
		"api-payment:50051",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Fatalf("failed to connect to Payment service: %v\n", err)
	}

	inventoryConn, err := grpc.NewClient(
		"api-inventory:50051",
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		log.Fatalf("failed to connect to Inventory service: %v\n", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º grpc-–∫–ª–∏–µ–Ω—Ç—ã –∫ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
	paymentConn.Connect()
	paymentClient := paymentV1.NewPaymentServiceClient(paymentConn)
	inventoryConn.Connect()
	inventoryClient := inventoryV1.NewInventoryServiceClient(inventoryConn)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	repository := orderRepo.NewOrderRepository()
	service := orderService.NewOrderService(repository, inventoryClient, paymentClient)
	api := orderApiV1.NewOrderAPI(service)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º order API
	orderApiRouter, err := orderV1.NewServer(api)
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ openapi.order.v1: %v", err)
	}
	r.Mount("/api/", orderApiRouter)

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º Swagger UI
	r.Mount("/swagger", swagger.NewSwaggerHandler(
		"/swagger/", "order_v1.swagger.json", "api"))
	r.Get("/", func(w http.ResponseWriter, r *http.Request) {
		http.Redirect(w, r, "/swagger/", http.StatusMovedPermanently)
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("0.0.0.0", httpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout,
	}

	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", httpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º graceful shutdown –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	notify := make(chan os.Signal, 1)
	signal.Notify(notify, syscall.SIGINT, syscall.SIGTERM)
	<-notify

	tCtx, tCancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer tCancel()

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")
	err = server.Shutdown(tCtx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}
	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
