// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/xgmsx/rsf/order/internal/model"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

type OrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderService) EXPECT() *OrderService_Expecter {
	return &OrderService_Expecter{mock: &_m.Mock}
}

// CancelOrder provides a mock function with given fields: ctx, orderUUID
func (_m *OrderService) CancelOrder(ctx context.Context, orderUUID string) (model.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOrder'
type OrderService_CancelOrder_Call struct {
	*mock.Call
}

// CancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderService_Expecter) CancelOrder(ctx interface{}, orderUUID interface{}) *OrderService_CancelOrder_Call {
	return &OrderService_CancelOrder_Call{Call: _e.mock.On("CancelOrder", ctx, orderUUID)}
}

func (_c *OrderService_CancelOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderService_CancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_CancelOrder_Call) Return(_a0 model.Order, _a1 error) *OrderService_CancelOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CancelOrder_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_CancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderService) CreateOrder(ctx context.Context, order model.CreateOrderInput) (model.CreateOrderOutput, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 model.CreateOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrderInput) (model.CreateOrderOutput, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateOrderInput) model.CreateOrderOutput); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(model.CreateOrderOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CreateOrderInput) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrderService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order model.CreateOrderInput
func (_e *OrderService_Expecter) CreateOrder(ctx interface{}, order interface{}) *OrderService_CreateOrder_Call {
	return &OrderService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *OrderService_CreateOrder_Call) Run(run func(ctx context.Context, order model.CreateOrderInput)) *OrderService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateOrderInput))
	})
	return _c
}

func (_c *OrderService_CreateOrder_Call) Return(_a0 model.CreateOrderOutput, _a1 error) *OrderService_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_CreateOrder_Call) RunAndReturn(run func(context.Context, model.CreateOrderInput) (model.CreateOrderOutput, error)) *OrderService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, orderUUID
func (_m *OrderService) GetOrder(ctx context.Context, orderUUID string) (model.Order, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Order, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Order); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrderService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *OrderService_Expecter) GetOrder(ctx interface{}, orderUUID interface{}) *OrderService_GetOrder_Call {
	return &OrderService_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, orderUUID)}
}

func (_c *OrderService_GetOrder_Call) Run(run func(ctx context.Context, orderUUID string)) *OrderService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrderService_GetOrder_Call) Return(_a0 model.Order, _a1 error) *OrderService_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_GetOrder_Call) RunAndReturn(run func(context.Context, string) (model.Order, error)) *OrderService_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// PayOrder provides a mock function with given fields: ctx, request
func (_m *OrderService) PayOrder(ctx context.Context, request model.PayOrderInput) (model.PayOrderOutput, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for PayOrder")
	}

	var r0 model.PayOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderInput) (model.PayOrderOutput, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PayOrderInput) model.PayOrderOutput); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(model.PayOrderOutput)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PayOrderInput) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderService_PayOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PayOrder'
type OrderService_PayOrder_Call struct {
	*mock.Call
}

// PayOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - request model.PayOrderInput
func (_e *OrderService_Expecter) PayOrder(ctx interface{}, request interface{}) *OrderService_PayOrder_Call {
	return &OrderService_PayOrder_Call{Call: _e.mock.On("PayOrder", ctx, request)}
}

func (_c *OrderService_PayOrder_Call) Run(run func(ctx context.Context, request model.PayOrderInput)) *OrderService_PayOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PayOrderInput))
	})
	return _c
}

func (_c *OrderService_PayOrder_Call) Return(_a0 model.PayOrderOutput, _a1 error) *OrderService_PayOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderService_PayOrder_Call) RunAndReturn(run func(context.Context, model.PayOrderInput) (model.PayOrderOutput, error)) *OrderService_PayOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
